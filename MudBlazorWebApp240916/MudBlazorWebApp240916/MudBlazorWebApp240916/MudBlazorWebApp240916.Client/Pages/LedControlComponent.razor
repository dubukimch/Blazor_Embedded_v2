@inject MqttService MqttService
@inject IJSRuntime JSRuntime

<MudDialog Class="custom-dialog">
    <DialogContent>
        <div style="display: flex; justify-content: space-between; align-items: center; gap: 10px;">
            <div style="flex-grow: 1; display: flex; align-items: center;">
                <!-- 달력 왼쪽 정렬 -->
                <MudDatePicker @bind-Date="@Date1" Style="max-width: 300px;" />
            </div>
            <!-- 컨트롤 영역: LED On/Off 버튼과 슬라이더를 배치 -->
            <div style="display: flex; justify-content: flex-end; align-items: center; gap: 10px; position: relative;">
                <MudToggleIconButton @bind-Toggled="IsLedOn"
                                     Icon="@Icons.Material.Filled.PowerOff"
                                     Color="Color.Error"
                                     ToggledIcon="@Icons.Material.Filled.Power"
                                     ToggledColor="Color.Success"
                                     OnToggled="ToggleLed"
                                     title="@(IsLedOn ? "Turn Off" : "Turn On")" />

                <div style="transition: width 0.5s ease; overflow: hidden; width: @(IsLedOn ? "200px" : "0"); margin-left: 20px;">
                    <!-- LED가 켜져 있을 때만 슬라이더 표시 -->
                    @if (IsLedOn)
                    {
                        <MudSlider @bind-Value="LedIntensity"
                                   Min="0" Max="100"
                                   Step="1"
                                   ValueLabelFormat="{0}%"
                                   ValueLabel="true"
                                   Color="Color.Primary"
                                   Label="LED Intensity"
                                   Class="custom-slider" />
                    }
                </div>
            </div>
        </div>

        <!-- MudChart를 사용하여 실시간 센서 데이터 표시 -->
        <MudChart ChartType="ChartType.StackedBar"
                  ChartSeries="@Series"
                  XAxisLabels="@XAxisLabels"
                  Options="@ChartOptions"
                  Width="100%" Height="350px" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    public object ChartOptions => new
    {
        scales = new
        {
            y = new
            {
                ticks = new
                {
                    stepSize = 100,
                    maxTicksLimit = 5
                }
            }
        }
    };
    public DateTime? Date1 { get; set; } = DateTime.Now.AddDays(-10);

    [Parameter] public string MqttAddress { get; set; }
    [Parameter] public string IpAddress { get; set; }
    [Parameter] public int MqttPort { get; set; }
    [Parameter] public Dictionary<string, List<string>> MqttTopics { get; set; }

    public bool IsLedOn { get; set; } = false; // LED 상태 (ON/OFF)
    public int LedIntensity { get; set; } = 50; // LED 세기 기본값

    public List<ChartSeries> Series { get; set; } = new List<ChartSeries>();
    public string[] XAxisLabels = { "East", "West", "South", "North" };

    private int[] sensorData = new int[4]; // 센서 데이터를 저장할 배열
    private int[] morningData = new int[4];
    private int[] afternoonData = new int[4];
    private int[] eveningData = new int[4];

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync ()
    {
        // MQTT 구독 시작
        MqttService.OnMessageReceived += HandleMqttMessage;

        // MQTT 구독 설정
        await MqttService.SubscribeAsync(MqttTopics["east"].First());
        await MqttService.SubscribeAsync(MqttTopics["west"].First());
        await MqttService.SubscribeAsync(MqttTopics["south"].First());
        await MqttService.SubscribeAsync(MqttTopics["north"].First());

        // 초기 차트 렌더링
        await RenderChart();
    }

    public void OnDialogOpened ()
    {
        InvokeAsync(async () => await RenderChart());
    }

    private void Submit () => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel () => MudDialog.Cancel();

    private async Task ToggleLed ()
    {
        // MQTT 메시지를 통해 LED 상태 변경
        if (IsLedOn)
        {
            await MqttService.PublishMessageAsync(MqttTopics["led"].First(), "ON");
        }
        else
        {
            await MqttService.PublishMessageAsync(MqttTopics["led"].First(), "OFF");
        }
    }

    private void HandleMqttMessage (string topic, string payload)
    {
        int value = int.Parse(payload);
        var currentTime = DateTime.Now;

        if (MqttTopics["east"].Contains(topic)) sensorData[0] = value;
        if (MqttTopics["west"].Contains(topic)) sensorData[1] = value;
        if (MqttTopics["south"].Contains(topic)) sensorData[2] = value;
        if (MqttTopics["north"].Contains(topic)) sensorData[3] = value;

        // 시간대별로 센서 데이터를 업데이트
        if (currentTime.Hour >= 6 && currentTime.Hour < 12) UpdateMorningData(sensorData);
        if (currentTime.Hour >= 12 && currentTime.Hour < 18) UpdateAfternoonData(sensorData);
        if (currentTime.Hour >= 18 || currentTime.Hour < 6) UpdateEveningData(sensorData);

        // 차트 업데이트
        InvokeAsync(async () => await RenderChart());
    }

    private void UpdateMorningData (int[] sensorData)
    {
        morningData = sensorData.ToArray();
    }

    private void UpdateAfternoonData (int[] sensorData)
    {
        afternoonData = sensorData.ToArray();
    }

    private void UpdateEveningData (int[] sensorData)
    {
        eveningData = sensorData.ToArray();
    }

    private async Task RenderChart ()
    {
        Series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Morning", Data = morningData.Select(x => (double)x).ToArray() },
            new ChartSeries() { Name = "Afternoon", Data = afternoonData.Select(x => (double)x).ToArray() },
            new ChartSeries() { Name = "Evening", Data = eveningData.Select(x => (double)x).ToArray() }
        };

        // UI 업데이트
        await InvokeAsync(StateHasChanged);
    }

    // IAsyncDisposable 인터페이스 구현
    public async ValueTask DisposeAsync ()
    {
        // MQTT 구독 해제
        MqttService.OnMessageReceived -= HandleMqttMessage;

        // 연결 해제
        if (MqttService.IsConnected)
        {
            await MqttService.DisconnectAsync();
        }
    }
}
