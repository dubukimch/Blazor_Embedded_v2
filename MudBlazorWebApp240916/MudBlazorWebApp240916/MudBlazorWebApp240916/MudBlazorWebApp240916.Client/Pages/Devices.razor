@page "/devices"
@using MudBlazorWebApp240916.Shared.DataModel
@using System.Net
@inject NavigationManager NavigationManager
@inject DeviceDiscoveryService DeviceDiscoveryService
@inject IServiceProvider Services
@inject MqttService MqttService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<h3 class="connected-title">연결 가능한 장비 목록</h3>

@if (availableDevices != null && availableDevices.Any())
{
    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px;">
        <thead>
            <tr>
                <th>이름</th>
                <th>IP 주소</th>
                <th>설명</th>
                <th>MQTT 서버</th>
                <th>MQTT 포트</th>
                <th>연결</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in availableDevices)
            {
                <tr>
                    <td>@(string.IsNullOrEmpty(device.Name) ? "알 수 없음" : device.Name)</td>
                    <td>@device.Address</td>
                    <td>@device.Description</td>
                    <td>@device.MqttServer</td>
                    <td>@device.MqttPort</td>
                    <td>
                        <MudIconButton Icon="@Icons.Material.Filled.Link"
                                       Color="Color.Primary"
                                       OnClick="@(async () => await ConnectToDevice(device))"
                                       Disabled="@(!device.MqttTopics?.Any() ?? true)"
                                       Title="연결" />
                    </td>
                </tr>
                <tr>
                    <td colspan="6">
                        <!-- 자식 장치 표시 -->
                       @if (device.ConnectedDevices != null && device.ConnectedDevices.Any())
{
    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px;">
        <thead>
            <tr>
                <th>이름</th>
                <th>IP 주소</th>
                <th>설명</th>
                <th>MQTT 서버</th>
                <th>MQTT 포트</th>
                <th>연결</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var subDevice in device.ConnectedDevices)
            {
                <tr>
                    <td>@subDevice.Name</td>
                    <td>@subDevice.Address</td>
                    <td>@subDevice.Description</td>
                    <td>@subDevice.MqttServer</td>
                    <td>@subDevice.MqttPort</td>
                    <td>
                        <MudTreeView T="string" Expanded="true">
                            <MudTreeItem Text="MQTT Topics">
                                @foreach (var subTopicGroup in subDevice.MqttTopics)
                                {
                                    <MudTreeItem Text="@subTopicGroup.Key">
                                        @foreach (var subTopic in subTopicGroup.Value)
                                        {
                                            <MudTreeItem Text="@subTopic" />
                                        }
                                    </MudTreeItem>
                                }
                            </MudTreeItem>
                        </MudTreeView>
                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}
else
{
    <MudText>No connected devices</MudText>
}

                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}
else if (isLoading)
{
    <div class="loading-container">
        <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px; width:100%;">
            <thead>
                <tr>
                    <th>이름</th>
                    <th>IP 주소</th>
                    <th>설명</th>
                    <th>MQTT 서버</th>
                    <th>MQTT 포트</th>
                    <th>연결</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="6" style="text-align:center;">
                        <p>장비를 검색 중입니다...</p>
                    </td>
                </tr>
            </tbody>
        </MudSimpleTable>
    </div>
}
else
{
    <div class="loading-container">
        <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px; width:100%;">
            <thead>
                <tr>
                    <th>이름</th>
                    <th>IP 주소</th>
                    <th>설명</th>
                    <th>MQTT 서버</th>
                    <th>MQTT 포트</th>
                    <th>연결</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="6" style="text-align:center;">
                        <p>연결할 장비가 없습니다...</p>
                    </td>
                </tr>
            </tbody>
        </MudSimpleTable>
    </div>
}

<!-- 연결된 장비 목록 -->
<hr class="divider" />
<h3 class="connected-title">연결된 장비 목록</h3>

@if (connectedDevices != null && connectedDevices.Any())
{
    <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px;">
        <thead>
            <tr>
                <th>이름</th>
                <th>IP 주소</th>
                <th>설명</th>
                <th>MQTT 서버</th>
                <th>MQTT 포트</th>
                <th>연결</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in connectedDevices)
            {
                <tr>
                    <td>@(string.IsNullOrEmpty(device.Name) ? "알 수 없음" : device.Name)</td>
                    <td>@device.Address</td>
                    <td>@device.Description</td>
                    <td>@device.MqttServer</td>
                    <td>@device.MqttPort</td>
                    <td>
                        <MudIconButton Icon="@Icons.Material.Filled.Settings"
                                       Color="Color.Secondary"
                                       OnClick="@(async () => await OpenLedControlDialog(device))"
                                       Title="제어" />
                    </td>
                </tr>
                <tr>
                    <td colspan="6">
                        <!-- 자식 장치 표시 -->
                        @if (device.ConnectedDevices != null && device.ConnectedDevices.Any())
                        {
                            <MudExpansionPanels>
                                <MudExpansionPanel Text="Connected Devices">
                                    <MudList T="string">
                                        @foreach (var subDevice in device.ConnectedDevices)
                                        {
                                            <MudListItem>
                                                @subDevice.Name - @subDevice.Address
                                                <MudNestedList Text="MQTT Topics" Expanded="true">
                                                    @foreach (var subTopicGroup in subDevice.MqttTopics)
                                                    {
                                                        <MudListItem T="string" Text="@subTopicGroup.Key">
                                                            @foreach (var subTopic in subTopicGroup.Value)
                                                            {
                                                                <MudListItem T="string" Text="@subTopic" />
                                                            }
                                                        </MudListItem>
                                                    }
                                                </MudNestedList>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                        }
                        else
                        {
                            <MudText>No connected devices</MudText>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}
else
{
    <div class="loading-container">
        <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px; width:100%;">
            <thead>
                <tr>
                    <th>이름</th>
                    <th>IP 주소</th>
                    <th>설명</th>
                    <th>MQTT 서버</th>
                    <th>MQTT 포트</th>
                    <th>연결</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="6" style="text-align:center;">
                        <p>연결된 장비가 없습니다...</p>
                    </td>
                </tr>
            </tbody>
        </MudSimpleTable>
    </div>
}

@code {
    private List<Device> availableDevices;
    private List<Device> connectedDevices = new List<Device>();
    private bool isLoading = true;
    private Device currentDevice;
    private Dictionary<string, List<string>> mqttTopics;

    protected override async Task OnInitializedAsync()
    {
        availableDevices = await DeviceDiscoveryService.DiscoverDevicesAsync();
        isLoading = false;

        foreach (var device in availableDevices)
        {
            device.MqttServer = GetLocalIPAddress(); // 고정된 MQTT 서버
            device.MqttPort = "1883"; // 고정된 MQTT 포트
            device.TopicTreeRootNode = GenerateTreeNode(device.MqttTopics);
        }
    }

    private TreeNodeModel GenerateTreeNode(Dictionary<string, List<string>> mqttTopics)
    {
        var rootNode = new TreeNodeModel { Name = "MQTT Topics" };
        foreach (var topicGroup in mqttTopics)
        {
            var groupNode = new TreeNodeModel { Name = topicGroup.Key };
            foreach (var topic in topicGroup.Value)
            {
                groupNode.Nodes.Add(new TreeNodeModel { Name = topic });
            }
            rootNode.Nodes.Add(groupNode);
        }
        return rootNode;
    }

    private async Task ConnectToDevice(Device device)
    {
        if (string.IsNullOrEmpty(device.MqttServer) || string.IsNullOrEmpty(device.MqttPort))
        {
            Console.WriteLine("MQTT 서버와 포트 정보를 입력하세요.");
            return;
        }

        await MqttService.SendPostRequestToArduino(device.Address, device.MqttServer, int.Parse(device.MqttPort), device.MqttTopics);

        mqttTopics = await MqttService.ConnectAndGetTopicsAsync(device.MqttServer, device.Address, int.Parse(device.MqttPort));

        if (MqttService.IsConnected)
        {
            if (mqttTopics != null && mqttTopics.Any())
            {
                currentDevice = device;
                connectedDevices.Add(device); // 연결된 장비 목록에 추가
                availableDevices.Remove(device); // 연결 가능한 장비 목록에서 제거
            }
            else
            {
                Console.WriteLine("MQTT 토픽이 없습니다.");
            }
        }
        else
        {
            Console.WriteLine("MQTT 연결이 실패했습니다.");
        }
    }

    private async Task OpenLedControlDialog(Device device)
    {
        var parameters = new DialogParameters
        {
            { "MqttAddress", device.MqttServer },
            { "IpAddress", device.Address },
            { "MqttPort", int.Parse(device.MqttPort) },
            { "MqttTopics", device.MqttTopics }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<LedControlComponent>("LED Control", parameters, options);
    }

    private string GetLocalIPAddress()
    {
        var host = Dns.GetHostName();
        var ip = Dns.GetHostAddresses(host).FirstOrDefault(i => i.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork);

        return ip?.ToString() ?? "localhost";
    }
}

<style>
    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 300px;
        width: 100%;
    }

    .divider {
        margin: 20px 0;
        border: none;
        height: 2px;
        background-color: #ccc;
    }

    .connected-title {
        margin-bottom: 20px;
    }

    .ellipsis-text {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        display: block;
        max-width: 200px;
    }
</style>
