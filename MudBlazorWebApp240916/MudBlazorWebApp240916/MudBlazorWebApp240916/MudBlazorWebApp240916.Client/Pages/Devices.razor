@page "/devices"
@using MudBlazorWebApp240916.Shared.DataModel
@using System.Net
@inject NavigationManager NavigationManager
@inject DeviceDiscoveryService DeviceDiscoveryService
@inject IServiceProvider Services
@inject MqttService MqttService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
<head>
    <link href="css/modalStyles.css" rel="stylesheet" />
</head>

<h3>연결 가능한 장비 목록</h3>

@if (devices != null && devices.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>이름</th>
                <th>IP 주소</th>
                <th>설명</th>
                <th>MQTT 서버</th>
                <th>MQTT 포트</th>
                <th>MQTT 토픽</th>
                <th>연결</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in devices)
            {
                <tr>
                    <td>@device.Name</td>
                    <td>@device.Address</td>
                    <td>
                        @if (device.Description.Length > 30)
                        {
                            <span title="@device.Description">
                                @device.Description.Substring(0, 30)...
                            </span>
                        }
                        else
                        {
                            @device.Description
                        }
                    </td>
                    <td>
                        <input type="text" placeholder="MQTT 서버"
                               @bind="@device.MqttServer" />
                    </td>
                    <td>
                        <input type="text" placeholder="MQTT 포트"
                               @bind="@device.MqttPort" />
                    </td>
                    <td>
                        @if (device.MqttTopics != null && device.MqttTopics.Any())
                        {
                            <MudTreeView T="TreeNodeModel" @bind-SelectedValue="@device.SelectedTopicNode" ReadOnly>
                                <MudTreeViewItem Text="MQTT Topics">
                                    @foreach (var topicGroup in device.MqttTopics)
                                    {
                                        <MudTreeViewItem Text="@topicGroup.Key">
                                            @foreach (var topic in topicGroup.Value)
                            {
                                <MudTreeViewItem Text="@topic" />
                            }
                        </MudTreeViewItem>
                                    }
                                </MudTreeViewItem>
                            </MudTreeView>
                        }
                        else
                        {
                            <p>토픽을 불러오는 중...</p>
                        }
                    </td>
                    <td>
                        <button class="btn btn-success"
                                @onclick="@(async () => await ConnectToDevice(device))"
                                disabled="@(!device.MqttTopics?.Any() ?? true)">
                            연결
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (isLoading)
{
    <p>장비를 검색 중입니다...</p>
}
else
{
    <p>장비를 찾을 수 없습니다.</p>
}

@code {
    private List<Device> devices;
    private bool isLoading = true;
    private Device currentDevice;
    private Dictionary<string, List<string>> mqttTopics;

    protected override async Task OnInitializedAsync ()
    {
        devices = await DeviceDiscoveryService.DiscoverDevicesAsync();
        isLoading = false;

        foreach (var device in devices)
        {
            device.MqttServer = GetLocalIPAddress();
            device.MqttPort = "1883";
            device.TopicTreeRootNode = GenerateTreeNode(device.MqttTopics);
        }
    }

    // GenerateTreeNode 메서드 구현
    private TreeNodeModel GenerateTreeNode (Dictionary<string, List<string>> mqttTopics)
    {
        var rootNode = new TreeNodeModel { Name = "MQTT Topics" };
        foreach (var topicGroup in mqttTopics)
        {
            var groupNode = new TreeNodeModel { Name = topicGroup.Key };
            foreach (var topic in topicGroup.Value)
            {
                groupNode.Nodes.Add(new TreeNodeModel { Name = topic });
            }
            rootNode.Nodes.Add(groupNode);
        }
        return rootNode;
    }

    private async Task ConnectToDevice (Device device)
    {
        if (string.IsNullOrEmpty(device.MqttServer) || string.IsNullOrEmpty(device.MqttPort))
        {
            Console.WriteLine("MQTT 서버와 포트 정보를 입력하세요.");
            return;
        }

        await MqttService.SendPostRequestToArduino(device.Address,
            device.MqttServer, int.Parse(device.MqttPort), device.MqttTopics);

        mqttTopics = await MqttService.ConnectAndGetTopicsAsync(device.MqttServer,
            device.Address, int.Parse(device.MqttPort));

        if (MqttService.IsConnected)
        {
            if (mqttTopics != null && mqttTopics.Any())
            {
                currentDevice = device;
                OpenLedControlDialog(currentDevice);
            }
            else
            {
                Console.WriteLine("MQTT 토픽이 없습니다.");
            }
        }
        else
        {
            Console.WriteLine("MQTT 연결이 실패했습니다.");
        }
    }

    private async Task OpenLedControlDialog (Device device)
    {
        var parameters = new DialogParameters
        {
            { "MqttAddress", device.MqttServer },
            { "IpAddress", device.Address },
            { "MqttPort", int.Parse(device.MqttPort) },
            { "MqttTopics", device.MqttTopics }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        await DialogService.ShowAsync<LedControlComponent>("LED Control", parameters, options);
    }

    private string GetLocalIPAddress ()
    {
        var host = Dns.GetHostName();
        var ip = Dns.GetHostAddresses(host)
        .FirstOrDefault(i => i.AddressFamily ==
            System.Net.Sockets.AddressFamily.InterNetwork);

        return ip?.ToString() ?? "localhost";
    }
}
