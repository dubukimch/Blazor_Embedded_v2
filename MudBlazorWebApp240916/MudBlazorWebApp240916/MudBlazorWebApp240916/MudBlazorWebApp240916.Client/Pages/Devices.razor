@page "/devices"
@using MudBlazorWebApp240916.Shared.DataModel
@using MudBlazorWebApp240916.Shared.Services
@using MudBlazorWebApp240916

@using System.Net
@inject NavigationManager NavigationManager
@inject DeviceDiscoveryService DeviceDiscoveryService
@inject IServiceProvider Services
@inject MqttService MqttService
@inject IJSRuntime JSRuntime

<head>
    <link href="css/modalStyles.css" rel="stylesheet" />
</head>

<h3>연결 가능한 장비 목록</h3>

@if (devices != null && devices.Any())
{
    <MudTable Items="devices">
        <HeaderContent>
            <MudTh>이름</MudTh>
            <MudTh>IP 주소</MudTh>
            <MudTh>설명</MudTh>
            <MudTh>MQTT 서버</MudTh>
            <MudTh>MQTT 포트</MudTh>
            <MudTh>MQTT 토픽</MudTh>
            <MudTh>연결</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="이름">@context.Name</MudTd>
            <MudTd DataLabel="IP 주소">@context.Address</MudTd>
            <MudTd DataLabel="설명">@context.Description</MudTd>
            <MudTd DataLabel="MQTT 서버">@context.MqttServer</MudTd>
            <MudTd DataLabel="MQTT 포트">@context.MqttPort</MudTd>
            <MudTd DataLabel="MQTT 토픽">...</MudTd>
            <MudTd DataLabel="연결">
                <MudButton Color="Color.Primary" OnClick="@(() => ConnectToDevice(context))">Connect</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else if (isLoading)
{
    <p>장비를 검색 중입니다...</p>
}
else
{
    <p>장비를 찾을 수 없습니다.</p>
}

<!-- MudBlazor 모달 -->
<MudDialog @bind-Open="@isModalOpen">
    <MudDialogContent>
        @if (currentDevice != null && mqttTopics != null)
        {
            <LedControlComponent MqttAddress="currentDevice.MqttServer"
                                 IpAddress="currentDevice.Address"
                                 MqttPort="int.Parse(currentDevice.MqttPort)"
                                 MqttTopics="mqttTopics"
                                 @ref="ledControlComponent" />
        }
    </MudDialogContent>
    <MudDialogActions>
        <MudButton OnClick="CloseModal" Color="Color.Primary">Close</MudButton>
    </MudDialogActions>
</MudDialog>

@code {
    private List<Device> devices;
    private bool isLoading = true;
    private Device currentDevice;
    private Dictionary<string, List<string>> mqttTopics;
    private bool isModalOpen = false; 
    private LedControlComponent ledControlComponent;

    private void OpenModal()
    {
        isModalOpen = true;
        ledControlComponent?.OnDialogOpened();
    }

    private void CloseModal()
    {
        isModalOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        devices = await DeviceDiscoveryService.DiscoverDevicesAsync();
        isLoading = false;

        foreach (var device in devices)
        {
            device.MqttServer = GetLocalIPAddress();
            device.MqttPort = "1883";

            device.TopicTreeRootNode = GenerateTreeNode(device.MqttTopics);
        }
    }

    private TreeNodeModel GenerateTreeNode(Dictionary<string, List<string>> mqttTopics)
    {
        var rootNode = new TreeNodeModel { Name = "MQTT Topics" };
        foreach (var topicGroup in mqttTopics)
        {
            var groupNode = new TreeNodeModel { Name = topicGroup.Key };
            foreach (var topic in topicGroup.Value)
            {
                groupNode.Nodes.Add(new TreeNodeModel { Name = topic });
            }
            rootNode.Nodes.Add(groupNode);
        }
        return rootNode;
    }

    private async Task ConnectToDevice(Device device)
    {
        if (string.IsNullOrEmpty(device.MqttServer) || string.IsNullOrEmpty(device.MqttPort))
        {
            Console.WriteLine("MQTT 서버와 포트 정보를 입력하세요.");
            return;
        }

        Console.WriteLine($"Address: {device.Address}\nMqttPort: {device.MqttPort}\nName: {device.Name}\nMqttServer: {device.MqttServer}");

        await MqttService.SendPostRequestToArduino(device.Address, device.MqttServer, int.Parse(device.MqttPort), device.MqttTopics);

        mqttTopics = await MqttService.ConnectAndGetTopicsAsync(device.MqttServer, device.Address, int.Parse(device.MqttPort));

        if (MqttService.IsConnected)
        {
            if (mqttTopics != null && mqttTopics.Any() && mqttTopics.First().Value != null && mqttTopics.First().Value.Any())
            {
                currentDevice = device;
                OpenModal();  
                await Task.Delay(100);  
                ledControlComponent?.OnDialogOpened();  
            }
            else
            {
                Console.WriteLine("MQTT 토픽에 값이 없습니다.");
            }
        }
        else
        {
            Console.WriteLine("MQTT 연결이 되지 않았습니다.");
        }
    }

    private string GetLocalIPAddress()
    {
        var host = Dns.GetHostName();
        var ip = Dns.GetHostAddresses(host)
            .FirstOrDefault(i => i.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork);

        return ip?.ToString() ?? "localhost";
    }
}
