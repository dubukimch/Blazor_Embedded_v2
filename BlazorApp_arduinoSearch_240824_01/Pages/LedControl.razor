@page "/ledControl"
@inject Services.MqttService MqttService
@inject NavigationManager NavigationManager


<h3>LedControl</h3> <!-- 컴포넌트 이름을 대문자로 시작 -->

<button @onclick="TurnOn">Turn On</button>
<button @onclick="TurnOff">Turn Off</button>

@code {
    private string mqttAddress;
    private int mqttPort;
    private string mqttTopic;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the MQTT messages from Arduino
        MqttService.OnMessageReceived += (topic, message) =>
        {
            Console.WriteLine($"Received message on topic {topic}: {message}");
            // Optionally update the UI based on received messages
        };
        // Query String에서 MQTT 정보 가져오기
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        mqttAddress = query["mqttAddress"];
        mqttPort = int.Parse(query["mqttPort"]);
        mqttTopic = query["mqttTopic"];

        await MqttService.ConnectAsync(mqttAddress, mqttPort,mqttTopic); // await 연산자 추가
    }

    private async Task TurnOn()
    {
        Console.WriteLine($"{mqttTopic} => ON");

        await MqttService.PublishMessageAsync(mqttTopic, "ON");
    }

    private async Task TurnOff()
    {
        Console.WriteLine($"{mqttTopic} => OFF");

        await MqttService.PublishMessageAsync(mqttTopic, "OFF");
    }

    public void Dispose()
    {
        MqttService.OnMessageReceived -= (topic, message) =>
        {
            Console.WriteLine($"Received message on topic {topic}: {message}");
        };
    }
}
