@inject MqttService MqttService
@inject IJSRuntime JSRuntime

<h3>LED Control and Light Sensor Data</h3>

<!-- LED 제어 버튼 -->
<MatButton OnClick="TurnOn" Class="custom-button turn-on-button m-1">Turn On</MatButton>
<MatButton OnClick="TurnOff" Class="custom-button turn-off-button m-1">Turn Off</MatButton>

<!-- 차트를 표시할 캔버스 -->
<canvas id="lightSensorChart" width="400" height="200"></canvas>

@code {
    [Parameter] public string MqttAddress { get; set; }
    [Parameter] public string IpAddress { get; set; }
    [Parameter] public int MqttPort { get; set; }
    [Parameter] public Dictionary<string, List<string>> MqttTopics { get; set; }

    private int[] morningData = new int[4];    // 동, 서, 남, 북 조도센서 아침 값
    private int[] afternoonData = new int[4];  // 동, 서, 남, 북 조도센서 점심 값
    private int[] eveningData = new int[4];    // 동, 서, 남, 북 조도센서 저녁 값

    protected override async Task OnInitializedAsync ()
    {
        // MQTT 연결 및 토픽 정보 가져오기
        MqttTopics = await MqttService.ConnectAndGetTopicsAsync(MqttAddress, IpAddress, MqttPort);

        // MQTT 메시지 수신 핸들러 등록
        MqttService.OnMessageReceived += (topic, message) =>
        {
            if (MqttTopics["led"].FirstOrDefault() == topic)
            {
                HandleLedControlMessage(message);
            }

            foreach (var key in new[] { "east", "west", "south", "north" })
            {
                if (MqttTopics.ContainsKey(key) && MqttTopics[key].Contains(topic))
                {
                    UpdateLightSensorData(topic, message);
                    break;
                }
            }

            InvokeAsync(StateHasChanged); // UI 업데이트
        };
    }

    protected override async Task OnAfterRenderAsync (bool firstRender)
    {
        if (firstRender)
        {
            await RenderChart(); // 차트를 처음 렌더링할 때 호출
        }
    }

    // LED 제어 메시지 처리 함수
    private void HandleLedControlMessage (string message)
    {
        if (message == "ON")
        {
            Console.WriteLine("LED is turned ON.");
        }
        else if (message == "OFF")
        {
            Console.WriteLine("LED is turned OFF.");
        }
    }

    // 조도 센서 데이터 업데이트 처리 함수
    private void UpdateLightSensorData (string topic, string message)
    {
        int value = int.Parse(message);

        // 현재 시간을 기준으로 시간대 구분
        var currentTime = DateTime.Now;
        if (currentTime.Hour >= 6 && currentTime.Hour < 12) // 아침
        {
            UpdateMorningData(topic, value);
        }
        else if (currentTime.Hour >= 12 && currentTime.Hour < 18) // 점심
        {
            UpdateAfternoonData(topic, value);
        }
        else if (currentTime.Hour >= 18 || currentTime.Hour < 6) // 저녁 및 야간
        {
            UpdateEveningData(topic, value);
        }

        InvokeAsync(UpdateChart);
    }

    private void UpdateMorningData (string topic, int value)
    {
        if (topic == "sensor/east") morningData[0] = value;
        else if (topic == "sensor/west") morningData[1] = value;
        else if (topic == "sensor/south") morningData[2] = value;
        else if (topic == "sensor/north") morningData[3] = value;
    }

    private void UpdateAfternoonData (string topic, int value)
    {
        if (topic == "sensor/east") afternoonData[0] = value;
        else if (topic == "sensor/west") afternoonData[1] = value;
        else if (topic == "sensor/south") afternoonData[2] = value;
        else if (topic == "sensor/north") afternoonData[3] = value;
    }

    private void UpdateEveningData (string topic, int value)
    {
        if (topic == "sensor/east") eveningData[0] = value;
        else if (topic == "sensor/west") eveningData[1] = value;
        else if (topic == "sensor/south") eveningData[2] = value;
        else if (topic == "sensor/north") eveningData[3] = value;
    }

    // 차트 초기 렌더링 함수
    private async Task RenderChart ()
    {
        var lightSensorData = new
        {
            morning = morningData,
            afternoon = afternoonData,
            evening = eveningData
        };

        await JSRuntime.InvokeVoidAsync("renderLightSensorChart", "lightSensorChart", lightSensorData);
    }

    // 차트 업데이트 함수
    private async Task UpdateChart ()
    {
        var lightSensorData = new
        {
            morning = morningData,
            afternoon = afternoonData,
            evening = eveningData
        };

        await JSRuntime.InvokeVoidAsync("updateLightSensorChart", "lightSensorChart", lightSensorData);
    }

    private async Task TurnOn ()
    {
        await MqttService.PublishMessageAsync(MqttTopics["led"].FirstOrDefault(), "ON");
    }

    private async Task TurnOff ()
    {
        await MqttService.PublishMessageAsync(MqttTopics["led"].FirstOrDefault(), "OFF");
    }
}
