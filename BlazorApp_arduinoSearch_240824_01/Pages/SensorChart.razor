@page "/soilMoistureChart"
@using System.Text.Json
@inject MqttService MqttService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable
@using System.Text.Json.Serialization

<h3>Real-Time Sensor Data</h3>

<!-- Separate canvas elements for each chart -->
<canvas id="temperatureChart" width="400" height="200"></canvas>
<canvas id="humidityChart" width="400" height="200"></canvas>
<canvas id="soilMoistureChart" width="400" height="200"></canvas>

@code {
    private string mqttAddress;
    private int mqttPort;
    private Dictionary<string, List<string>> mqttTopics; // 여러 센서의 MQTT 토픽
    private List<float> temperatureData = new List<float>();
    private List<float> humidityData = new List<float>();
    private List<int> soilMoistureData = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        // Query String에서 MQTT 정보 가져오기
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        mqttAddress = query["mqttAddress"];
        mqttPort = int.Parse(query["mqttPort"]);

        // MQTT 브로커에 연결 및 토픽 정보 가져오기
        //mqttTopics = await MqttService.ConnectAndGetTopicsAsync(mqttAddress, mqttPort);

        // MQTT 메시지 수신 핸들러 등록
        MqttService.OnMessageReceived += HandleMqttMessage;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // JavaScript로 차트 초기화
            await JSRuntime.InvokeVoidAsync("initializeCharts");
        }
    }

    private async void HandleMqttMessage(string topic, string message)
    {
        Console.WriteLine($"Received MQTT message on topic {topic}: {message}");

        if (mqttTopics["temperature"].Contains(topic))
        {
            UpdateTemperatureData(message);
        }
        else if (mqttTopics["humidity"].Contains(topic))
        {
            UpdateHumidityData(message);
        }
        else if (mqttTopics["soil_moisture"].Contains(topic))
        {
            UpdateSoilMoistureData(message);
        }

        // 차트를 업데이트
        await UpdateCharts();
    }

    private void UpdateTemperatureData(string message)
    {
        float temperature = float.Parse(message);
        temperatureData.Add(temperature);

        if (temperatureData.Count > 10)
        {
            temperatureData.RemoveAt(0);
        }
    }

    private void UpdateHumidityData(string message)
    {
        float humidity = float.Parse(message);
        humidityData.Add(humidity);

        if (humidityData.Count > 10)
        {
            humidityData.RemoveAt(0);
        }
    }

    private void UpdateSoilMoistureData(string message)
    {
        int soilMoisture = int.Parse(message);
        soilMoistureData.Add(soilMoisture);

        if (soilMoistureData.Count > 10)
        {
            soilMoistureData.RemoveAt(0);
        }
    }

    private async Task UpdateCharts()
    {
        // JavaScript로 차트를 업데이트
        await JSRuntime.InvokeVoidAsync("updateCharts", temperatureData.ToArray(), humidityData.ToArray(), soilMoistureData.ToArray());
    }

    public void Dispose()
    {
        // MQTT 메시지 수신 핸들러 제거
        MqttService.OnMessageReceived -= HandleMqttMessage;

        // JavaScript에서 차트를 안전하게 정리
        JSRuntime.InvokeVoidAsync("disposeCharts");
    }

    public class SensorData
    {
        [JsonPropertyName("temperature")]
        public float Temperature { get; set; }

        [JsonPropertyName("humidity")]
        public float Humidity { get; set; }

        [JsonPropertyName("soil_moisture")]
        public int SoilMoisture { get; set; }
    }
}
