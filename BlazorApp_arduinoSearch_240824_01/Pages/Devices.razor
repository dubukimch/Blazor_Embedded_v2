@page "/devices"
@using BlazorApp_arduinoSearch_240824_01.DataModel
@using System.Net
@inject NavigationManager NavigationManager
@inject DeviceDiscoveryService DeviceDiscoveryService
@inject IServiceProvider Services
@inject MqttService MqttService
@inject IJSRuntime JSRuntime
<head>
    <link href="css/modalStyles.css" rel="stylesheet" />
</head>

<h3>연결 가능한 장비 목록</h3>

@if (devices != null && devices.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>이름</th>
                <th>IP 주소</th>
                <th>설명</th>
                <th>MQTT 서버</th>
                <th>MQTT 포트</th>
                <th>MQTT 토픽</th>
                <th>연결</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var device in devices)
            {
                <tr>
                    <td>@device.Name</td>
                    <td>@device.Address</td>
                    <td>
                        @if (device.Description.Length > 30)
                        {
                            <span title="@device.Description">@device.Description.Substring(0, 30)...</span>
                        }
                        else
                        {
                            @device.Description
                        }
                    </td>
                    <td>
                        <input type="text" placeholder="MQTT 서버" @bind="@device.MqttServer" />
                    </td>
                    <td>
                        <input type="text" placeholder="MQTT 포트" @bind="@device.MqttPort" />
                    </td>
                    <td>
                        @if (device.MqttTopics != null && device.MqttTopics.Any())
                        {
                            <MatTreeView TNode="TreeNodeModel"
                                         RootNode="@device.TopicTreeRootNode"
                                         GetChildNodesCallback="@((n) => n.Nodes)"
                                         @bind-SelectedNode="@device.SelectedTopicNode">
                                <NodeTemplate>
                                    @context.Name
                                </NodeTemplate>
                            </MatTreeView>
                        }
                        else
                        {
                            <p>아두이노로부터 토픽을 불러오는 중...</p>
                        }
                    </td>
                    <td>
                        <button class="btn btn-success" @onclick="() => ConnectToDevice(device)" disabled="@(!device.MqttTopics?.Any() ?? true)">연결</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (isLoading)
{
    <p>장비를 검색 중입니다...</p>
}
else
{
    <p>장비를 찾을 수 없습니다.</p>
}

<!-- HTML 기반 모달 구조 -->
<div class="modal @modalClass">
    <div class="modal-content">
        <span class="close-btn" @onclick="CloseModal">&times; Close</span>
        @if (currentDevice != null && mqttTopics != null)
        {
            <LedControlComponent MqttAddress="currentDevice.MqttServer"
                                 IpAddress="currentDevice.Address"
                                 MqttPort="int.Parse(currentDevice.MqttPort)"
                                 MqttTopics="mqttTopics"
                                 @ref="ledControlComponent" />
        }
    </div>
</div>

@code {
    private List<Device> devices;
    private bool isLoading = true;
    private Device currentDevice;
    private Dictionary<string, List<string>> mqttTopics;
    private string modalClass = ""; // 모달 창 표시 여부를 제어하는 변수
    private LedControlComponent ledControlComponent;

    private void OpenModal ()
    {
        modalClass = "show-modal"; // 모달 열기
        ledControlComponent?.OnDialogOpened(); // 모달이 열릴 때 차트를 렌더링하도록 호출
    }

    private void CloseModal ()
    {
        modalClass = "";  // 모달 닫기
    }

    protected override async Task OnInitializedAsync ()
    {
        devices = await DeviceDiscoveryService.DiscoverDevicesAsync();
        isLoading = false;

        foreach (var device in devices)
        {
            device.MqttServer = GetLocalIPAddress();
            device.MqttPort = "1883";

            device.TopicTreeRootNode = GenerateTreeNode(device.MqttTopics);
        }
    }

    private TreeNodeModel GenerateTreeNode (Dictionary<string, List<string>> mqttTopics)
    {
        var rootNode = new TreeNodeModel { Name = "MQTT Topics" };
        foreach (var topicGroup in mqttTopics)
        {
            var groupNode = new TreeNodeModel { Name = topicGroup.Key };
            foreach (var topic in topicGroup.Value)
            {
                groupNode.Nodes.Add(new TreeNodeModel { Name = topic });
            }
            rootNode.Nodes.Add(groupNode);
        }
        return rootNode;
    }

    private async Task ConnectToDevice (Device device)
    {
        if (string.IsNullOrEmpty(device.MqttServer) || string.IsNullOrEmpty(device.MqttPort))
        {
            Console.WriteLine("MQTT 서버와 포트 정보를 입력하세요.");
            return;
        }

        Console.WriteLine($"Address: {device.Address}\nMqttPort: {device.MqttPort}\nName: {device.Name}\nMqttServer: {device.MqttServer}");

        await MqttService.SendPostRequestToArduino(device.Address, device.MqttServer, int.Parse(device.MqttPort), device.MqttTopics);

        mqttTopics = await MqttService.ConnectAndGetTopicsAsync(device.MqttServer, device.Address, int.Parse(device.MqttPort));

        if (MqttService.IsConnected)
        {
            if (mqttTopics != null && mqttTopics.Any() && mqttTopics.First().Value != null && mqttTopics.First().Value.Any())
            {
                currentDevice = device;
                OpenModal();  // 모달 창 열기
                await Task.Delay(100);  // 모달 열리는 시간을 확보한 후 차트 렌더링
                ledControlComponent?.OnDialogOpened();  // 차트 렌더링 트리거
            }
            else
            {
                Console.WriteLine("MQTT 토픽에 값이 없습니다.");
            }
        }
        else
        {
            Console.WriteLine("MQTT 연결이 되지 않았습니다.");
        }
    }

    private string GetLocalIPAddress ()
    {
        var host = Dns.GetHostName();
        var ip = Dns.GetHostAddresses(host)
    .FirstOrDefault(i => i.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork);

        return ip?.ToString() ?? "localhost";
    }
}
